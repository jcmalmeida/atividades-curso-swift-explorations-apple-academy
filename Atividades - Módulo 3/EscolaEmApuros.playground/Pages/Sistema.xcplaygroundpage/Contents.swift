/*:
 ## Sistema.
 
 Agora que voc√™ passou por todas as etapas do treinamento, √© hora de juntar todas as pe√ßas do quebra-cabe√ßa! üß©
 
 Voc√™ j√° sabe sobre:
 
 - Array (Vetores)
 - Enum
 - Switch
 - Struct/Class
 
 Com esses conhecimentos, voc√™ tem o suficiente para montar um sistema para uma escola.
 
 Antes de come√ßarmos, √© importante voc√™ saber algumas exig√™ncias das escolas.
 
 Elas devem ser capazes de:
 
 1. Cadastrar novos colaboradores.
 2. Remover colabores atrav√©s de sua matr√≠cula.
 -
 3. Listar gastos mensais com todos os colaboradores.
 4. Listar gastos mensais por cargo (quanto √© gasto com monitor, quanto √© gasto com professor, etc.)
 5. Listar quantas pessoas existem por cargo (quantos monitores, quantos professores, etc.)
 6. Listar os nomes de todos os colaboradores em ordem alfab√©tica.
 
 **[DESAFIO]** Como voc√™ faria esse sistema?
 
 Abaixo, segue um exemplo de como seria um sistema similar ao do col√©gio üê∂.
 */

enum Raca {
    case poodle
    case husky
    case golden
    case labrador
    case caramelo
    
    // Sim! Em Swift, Enum pode conter fun√ß√µes! ‚ù§Ô∏è
    func nomeFormal() -> String {
        switch self {
        case .poodle:
            return "Poodle"
        case .husky:
            return "Husky Siberiano"
        case .golden:
            return "Golden Retriever"
        case .labrador:
            return "Labrador"
        case .caramelo:
            return "Caramelo"
        }
    }
    
    func possuiMuitoPelo() -> Bool {
        switch self {
        case .poodle, .husky, .golden:
            return true
        case .labrador, .caramelo:
            return false
        }
    }
}

struct Cachorro {
    let identificador: Int
    let nome: String
    let raca: Raca
    let gastoMensal: Double
    
    func descricao() -> String {
        return "Identificador: \(identificador): \(nome) √© um cachorro da ra√ßa \(raca.nomeFormal()) que possui um gasto mensal de R$\(gastoMensal)."
    }
}

// A class Abrigo √© o nosso sistema!
class Abrigo {
    var cachorros: [Cachorro]
    
    init(cachorros: [Cachorro]) {
        self.cachorros = cachorros
    }
    
    // Funcionalidade 1 do sistema da escola
    // Cadastrar novos colaboradores
    func adicionaCachorro(_ cachorro: Cachorro) {
        cachorros.append(cachorro)
    }
    
    // Funcionalidade 2 do sistema da escola
    // Remover colabores atrav√©s de sua matr√≠cula
    func removeCachorro(comIdentificador identificador: Int) {
        // Solu√ß√£o 1
        // Dificuldade: üî•
        // Podemos melhorar essa solu√ß√£o...
        for indice in 0..<cachorros.count {
            let cachorro = cachorros[indice]
            if cachorro.identificador == identificador {
                cachorros.remove(at: indice)
            }
        }
        
        // Solu√ß√£o 2
        // Dificuldade: üî•üî•
        // J√° est√° bom o suficiente
        for (indice, cachorro) in cachorros.enumerated() {
            if cachorro.identificador == identificador {
                cachorros.remove(at: indice)
            }
        }
        
        // Solu√ß√£o 3
        // Dificuldade: üî•üî•üî•
        // Solu√ß√£o um pouco mais "avan√ßada"
        cachorros.removeAll { (cachorro) -> Bool in
            cachorro.identificador == identificador
        }
        
        // Solu√ß√£o 4
        // Dificuldade: üî•üî•üî•üî•
        // Agora voc√™ decolou!!! üöÄ
        cachorros.removeAll{ $0.identificador == identificador }
    }
    
    // Funcionalidade 3 do sistema da escola
    // Listar gastos mensais com todos os colaboradores
    func listaGastoMensais() -> Double {
        var gastoTotal: Double = 0
        
        for cachorro in cachorros {
            // Solu√ß√£o 1
            // Dificuldade: üî•
            let gastoMensal = cachorro.gastoMensal
            gastoTotal = gastoTotal + gastoMensal
            
            // Solu√ß√£o 2
            // Dificuldade: üî•üî•
            // let gastoMensal = cachorro.gastoMensal
            // gastoTotal += gastoMensal
            
            // Solu√ß√£o 3
            // Dificuldade: üî•üî•üî•
            // gastoTotal += cachorro.gastoMensal
        }
        
        return gastoTotal
    }
    
    // Funcionalidade 4 do sistema da escola
    // Listar gastos mensais por cargo
    func listaGasto(daRaca raca: Raca) -> String {
        var gastoTotal: Double = 0
        
        // Solu√ß√£o 1
        // Dificuldade: üî•
        for cachorro in cachorros {
            if cachorro.raca == raca {
                gastoTotal += cachorro.gastoMensal
            }
        }
        
        // Solu√ß√£o 2
        // Dificuldade: üî•üî•
        // for cachorro in cachorros where cachorro.raca == raca {
        //     gastoTotal += cachorro.gastoMensal
        // }
        
        // Solu√ß√£o 3
        // Dificuldade: üî•üî•üî•üî•üî•üî•üî•üî•üî•
        // gastoTotal = cachorros.map{ $0.gastoMensal }.reduce(0, +)
        
        return "Os gastos com a ra√ßa \(raca.nomeFormal()) s√£o de R$\(gastoTotal)."
    }
    
    // Funcionalidade 5 do sistema da escola
    // Listar quantas pessoas existem por cargo
    func listaQuantidadeDeCachorro(daRaca raca: Raca) -> String {
        var quantidadeDeCachorro = 0
        
        // Solu√ß√£o 1
        // Dificuldade: üî•
        for cachorro in cachorros {
            if cachorro.raca == raca {
                quantidadeDeCachorro += 1
            }
        }
        
        // Solu√ß√£o 2
        // Dificuldade: üî•üî•
        // for cachorro in cachorros where cachorro.raca == raca {
        //     quantidadeDeCachorro += 1
        // }
        
        // Solu√ß√£o 3
        // Dificuldade: üî•üî•üî•üî•üî•üî•
        // quantidadeDeCachorro = cachorros.filter{ $0.raca == raca }.count
        
        return "Existe(m) \(quantidadeDeCachorro) cachorro(s) da ra√ßa \(raca.nomeFormal())."
    }
    
    // Funcionalidade 6 do sistema da escola
    // Listar os nomes de todos os colaboradores em ordem alfab√©tica
    func listaCachorrosEmOrdemAlfabetica() -> [String] {
        // Primeiro, precisamos pegar todos os nomes de todos os cachorros
        var nomes: [String] = []
        
        // Solu√ß√£o 1
        // Dificuldade: üî•
        for cachorro in cachorros {
            let cachorroNome = cachorro.nome
            nomes.append(cachorroNome)
        }
        
        // Solu√ß√£o 2
        // Dificuldade: üî•üî•
        // nomes = cachorros.map{ $0.nome }
        
        // Agora √© s√≥ ordenar a nossa lista de nomes!
        // Obrigado Swift por j√° ter uma fun√ß√£o para isso üôè
        nomes.sort()
        
        // Solu√ß√£o 3
        // Dificuldade: üî•üî•üî•
        // Essa solu√ß√£o j√° faz tudo
        // .map -> cria um Array de String
        // .sorted() -> ordena o Array
        // nomes = cachorros.map{ $0.nome }.sorted()
        
        return nomes
    }
}

let muitosCachorros: [Cachorro] =
    [
        Cachorro(identificador: 0, nome: "Rex", raca: .caramelo, gastoMensal: 100),
        Cachorro(identificador: 1, nome: "Bob", raca: .labrador, gastoMensal: 50),
        Cachorro(identificador: 2, nome: "Fred", raca: .golden, gastoMensal: 200),
        Cachorro(identificador: 3, nome: "Zeus", raca: .caramelo, gastoMensal: 500),
        Cachorro(identificador: 4, nome: "Babi", raca: .poodle, gastoMensal: 3000),
        Cachorro(identificador: 5, nome: "Xerox", raca: .labrador, gastoMensal: 1500),
        Cachorro(identificador: 6, nome: "Slinky", raca: .poodle, gastoMensal: 2500),
        Cachorro(identificador: 7, nome: "Fancy", raca: .labrador, gastoMensal: 1000),
        Cachorro(identificador: 8, nome: "Britney", raca: .caramelo, gastoMensal: 30),
        Cachorro(identificador: 9, nome: "Panqueca", raca: .golden, gastoMensal: 450),
        Cachorro(identificador: 10, nome: "Tiziu", raca: .golden, gastoMensal: 900),
        Cachorro(identificador: 11, nome: "Simba", raca: .husky, gastoMensal: 700),
        Cachorro(identificador: 12, nome: "Thor", raca: .labrador, gastoMensal: 1300),
        Cachorro(identificador: 13, nome: "Kawaii", raca: .caramelo, gastoMensal: 1200)
    ]

let abrigo = Abrigo(cachorros: muitosCachorros)

// Funcionalidade 1
print(abrigo.listaCachorrosEmOrdemAlfabetica())

let avin = Cachorro(identificador: 14, nome: "Avin", raca: .caramelo, gastoMensal: 300)
abrigo.adicionaCachorro(avin)

print(abrigo.listaCachorrosEmOrdemAlfabetica())
// Voc√™ consegue ver que "Avin" agora aparece dentro do print?
// Isso acontece pois o cachorro foi adicionado com sucesso ao abrigo!

// Funcionalidade 2

print(abrigo.listaCachorrosEmOrdemAlfabetica())

abrigo.removeCachorro(comIdentificador: 14)

print(abrigo.listaCachorrosEmOrdemAlfabetica())
// Voc√™ consegue ver que "Avin" n√£o aparece mais no print?
// Isso acontece pois o cachorro Rex de identificador 0 foi removido com sucesso do abrigo!

// Funcionalidade 3
print(abrigo.listaGastoMensais())

// Funcionalidade 4
print(abrigo.listaGasto(daRaca: .caramelo))
print(abrigo.listaGasto(daRaca: .poodle))
print(abrigo.listaGasto(daRaca: .husky))
print(abrigo.listaGasto(daRaca: .labrador))
print(abrigo.listaGasto(daRaca: .golden))

// Funcionalidade 5
print(abrigo.listaQuantidadeDeCachorro(daRaca: .caramelo))
print(abrigo.listaQuantidadeDeCachorro(daRaca: .poodle))
print(abrigo.listaQuantidadeDeCachorro(daRaca: .husky))
print(abrigo.listaQuantidadeDeCachorro(daRaca: .labrador))
print(abrigo.listaQuantidadeDeCachorro(daRaca: .golden))

// Funcionalidade 6
print(abrigo.listaCachorrosEmOrdemAlfabetica())
print("\n\n")

// Seu sistema aqui!
// Sistema da escola

// Por padr√£o, a fun√ß√£o sort n√£o ordena adequadamente nomes com acento. Para garantir o ordenamento correto, precisei passar alguns par√¢metros para a fun√ß√£o sort e, com isso importar a biblioteca Foundation
import Foundation

enum Cargo {
    case monitor, professor, coordenador, diretor, assistente
}

struct Colaborador {
    let nome: String
    let matricula: Int
    let salario: Float
    let cargo: Cargo
}

var colaboradores: [Colaborador] = []
var salarioDoDiretor: Float = 0
var escolaTemDiretor = false
var numeroDeCoordenadores = 0
var numeroDeProfessores = 0

func cadastrarColaborador(novoColaborador: Colaborador) {
    if escolaTemDiretor && novoColaborador.cargo == .diretor {
        print("\(novoColaborador.nome), desculpe mas a escola j√° tem diretor.\n")
    } else if !escolaTemDiretor && novoColaborador.cargo == .diretor {
        escolaTemDiretor = true
        salarioDoDiretor = novoColaborador.salario
        colaboradores.append(novoColaborador)
    } else if novoColaborador.cargo == .coordenador && numeroDeProfessores <= numeroDeCoordenadores {
        print("\(novoColaborador.nome), desculpe mas a escola est√° no limite entre o n√∫mero de professores e coordenadores.\n")
    } else if novoColaborador.cargo == .coordenador && novoColaborador.salario < salarioDoDiretor {
        numeroDeCoordenadores += 1
        colaboradores.append(novoColaborador)
    } else if novoColaborador.cargo == .professor && novoColaborador.salario < salarioDoDiretor {
        numeroDeProfessores += 1
        colaboradores.append(novoColaborador)
    } else if novoColaborador.salario < salarioDoDiretor {
        colaboradores.append(novoColaborador)
    } else {
        print("\(novoColaborador.nome), o sal√°rio pedido √© incompat√≠vel com a fun√ß√£o de \(novoColaborador.cargo).\n")
    }
}

func descadastrarColaborador(matricula: Int) {
    var indiceParaDeletar = 0
    for index in 0..<colaboradores.count {
        if colaboradores[index].matricula == matricula {
            indiceParaDeletar = index
        }
    }
    if escolaTemDiretor && colaboradores[indiceParaDeletar].cargo == .diretor {
        escolaTemDiretor = false
        print("Precisamos urgentemente de um novo diretor!\n")
    } else if colaboradores[indiceParaDeletar].cargo == .coordenador {
        numeroDeCoordenadores -= 1
    } else if colaboradores[indiceParaDeletar].cargo == .professor {
        numeroDeProfessores -= 1
        if numeroDeCoordenadores >= numeroDeProfessores {
            print("No momento, temos \(numeroDeProfessores) professores e \(numeroDeCoordenadores) coordenadores na escola. Esta rela√ß√£o est√° em desequil√≠brio, precisamos de mais professores!\n")
        }
    }
    colaboradores.remove(at: indiceParaDeletar)
}

func gastosMensaisTotais() {
    var gastoTotal: Float = 0
    for colaborador in colaboradores {
        gastoTotal = colaborador.salario + gastoTotal
    }
    print("O gasto total com colaboradores √© de R$ \(gastoTotal).\n")
}

func gastosMensaisPorCargo(de cargo: Cargo) {
    var gastoPorCargo: Float = 0
    for colaborador in colaboradores {
        if colaborador.cargo == cargo {
            gastoPorCargo = colaborador.salario + gastoPorCargo
        }
    }
    print("O gasto total com colaboradores no cargo de \(cargo) √© de R$ \(gastoPorCargo).")
}

func quantidadeDePessoasNoCargo(de cargo: Cargo) {
    var quantidadeDePessoas: Int = 0
    for colaborador in colaboradores {
        if colaborador.cargo == cargo {
            quantidadeDePessoas += 1
        }
    }
    print("A quantidade de colaboradores no cargo de \(cargo) √© de \(quantidadeDePessoas).\n")
}

func estatisticasDoCargo(de cargo: Cargo) {
    gastosMensaisPorCargo(de: cargo)
    quantidadeDePessoasNoCargo(de: cargo)
}

func listaDeColaboradores() {
    var listaDeColaboradores: [String] = []
    for colaborador in colaboradores {
        listaDeColaboradores.append(colaborador.nome)
    }
    listaDeColaboradores.sort { $0.compare($1, locale: NSLocale.current) == .orderedAscending }
    print(listaDeColaboradores)
}

let john = Colaborador(nome: "John", matricula: 1234, salario: 10000, cargo: .professor)
let marie = Colaborador(nome: "Marie", matricula: 4321, salario: 20000, cargo: .diretor)
let joao = Colaborador(nome: "Jo√£o", matricula: 1234, salario: 10000, cargo: .professor)
let thais = Colaborador(nome: "Thais", matricula: 5678, salario: 15000, cargo: .coordenador)
let jose = Colaborador(nome: "Jos√©", matricula: 9876, salario: 11000, cargo: .professor)
let ana = Colaborador(nome: "Ana", matricula: 1359, salario: 14000, cargo: .coordenador)
let maria = Colaborador(nome: "Maria", matricula: 2468, salario: 10500, cargo: .coordenador)
let anastacia = Colaborador(nome: "Anast√°cia", matricula: 2468, salario: 30000, cargo: .diretor)
let antonio = Colaborador(nome: "Ant√¥nio", matricula: 0000, salario: 9000, cargo: .professor)
let otavio = Colaborador(nome: "Ot√°vio", matricula: 0001, salario: 10000, cargo: .assistente)

cadastrarColaborador(novoColaborador: john)
cadastrarColaborador(novoColaborador: marie)
cadastrarColaborador(novoColaborador: joao)
cadastrarColaborador(novoColaborador: thais)
cadastrarColaborador(novoColaborador: jose)
cadastrarColaborador(novoColaborador: ana)
cadastrarColaborador(novoColaborador: maria)
cadastrarColaborador(novoColaborador: anastacia)
cadastrarColaborador(novoColaborador: antonio)
cadastrarColaborador(novoColaborador: otavio)

//print(colaboradores)
//print("\n")

//descadastrarColaborador(matricula: 2468)

//print(colaboradores)
//print("\n")

gastosMensaisTotais()
estatisticasDoCargo(de: .professor)
estatisticasDoCargo(de: .coordenador)
estatisticasDoCargo(de: .diretor)
estatisticasDoCargo(de: .assistente)
estatisticasDoCargo(de: .monitor)

listaDeColaboradores()

descadastrarColaborador(matricula: 0000)
descadastrarColaborador(matricula: 4321)
/*:
 [J√° acabou, J√©ssica?](https://www.otempo.com.br/polopoly_fs/1.1170250.1534206665!httpImage/image.png)
 
Ufa! Esse foi um desafio um tanto quanto longo, mas sobrevivemos.
 
 Por√©m, o sistema da escola n√£o √© t√£o "simples" assim.
 
 Ele possui algumas regras que precisam ser seguidas.
 
 S√£o elas:
 
 - O SAL√ÅRIO pode conter qualquer valor (crise pra quem?), mas o maior sal√°rio deve ser sempre o do DIRETOR.

 - A ESCOLA n√£o pode ter mais do que um DIRETOR.

 - A ESCOLA n√£o pode ter mais COORDENADORES do que PROFESSORES.

**[DESAFIO]** Como voc√™ faria acrescentaria essas regras ao seu sistema?
 
 Dessa vez, eu n√£o darei dicas de solu√ß√£o üòâ.
 
 *Give your jumps!* (D√° teus pulos)
*/

// Pode incrementar essas regras no seu sistema desenvolvido acima.
// O c√≥digo acima j√° cont√©m as regras solicitadas.
/*:
Terminado essa atividade, voc√™ est√° com anima√ß√£o para a pr√≥xima etapa?
 
 E vamos de Xcode!

[Anterior: Colaboradores](@previous) | P√°gina 5 de 6  |  [Na sequ√™ncia: Xcode](@next)
*/
